// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contest.sql

package db

import (
	"context"
)

const createContest = `-- name: CreateContest :one
INSERT INTO sf_contest (
    user_id, 
    subject_id, 
    num_question, 
    time_exam, 
    time_start_exam, 
    state, 
    questions
) 
VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id
`

type CreateContestParams struct {
	UserID        int64        `json:"user_id"`
	SubjectID     int64        `json:"subject_id"`
	NumQuestion   int32        `json:"num_question"`
	TimeExam      int32        `json:"time_exam"`
	TimeStartExam int64        `json:"time_start_exam"`
	State         ContestState `json:"state"`
	Questions     string       `json:"questions"`
}

func (q *Queries) CreateContest(ctx context.Context, arg CreateContestParams) (int64, error) {
	row := q.db.QueryRow(ctx, createContest,
		arg.UserID,
		arg.SubjectID,
		arg.NumQuestion,
		arg.TimeExam,
		arg.TimeStartExam,
		arg.State,
		arg.Questions,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getContest = `-- name: GetContest :one
SELECT 
    id, 
    subject_id, 
    num_question, 
    time_exam, 
    state
FROM 
    sf_contest
WHERE 
    id = $1
`

type GetContestRow struct {
	ID          int64        `json:"id"`
	SubjectID   int64        `json:"subject_id"`
	NumQuestion int32        `json:"num_question"`
	TimeExam    int32        `json:"time_exam"`
	State       ContestState `json:"state"`
}

func (q *Queries) GetContest(ctx context.Context, id int64) (GetContestRow, error) {
	row := q.db.QueryRow(ctx, getContest, id)
	var i GetContestRow
	err := row.Scan(
		&i.ID,
		&i.SubjectID,
		&i.NumQuestion,
		&i.TimeExam,
		&i.State,
	)
	return i, err
}

const getContestByState = `-- name: GetContestByState :many
SELECT 
    id, 
    subject_id, 
    num_question, 
    time_exam, 
    state
FROM 
    sf_contest
WHERE 
    state = $1
`

type GetContestByStateRow struct {
	ID          int64        `json:"id"`
	SubjectID   int64        `json:"subject_id"`
	NumQuestion int32        `json:"num_question"`
	TimeExam    int32        `json:"time_exam"`
	State       ContestState `json:"state"`
}

func (q *Queries) GetContestByState(ctx context.Context, state ContestState) ([]GetContestByStateRow, error) {
	rows, err := q.db.Query(ctx, getContestByState, state)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetContestByStateRow{}
	for rows.Next() {
		var i GetContestByStateRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.NumQuestion,
			&i.TimeExam,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContest = `-- name: UpdateContest :one
UPDATE sf_contest
SET 
    num_question = COALESCE($2, num_question),
    time_exam = COALESCE($3, time_exam),
    time_start_exam = COALESCE($4, time_start_exam),
    state = COALESCE($5, state),
    questions = COALESCE($6, questions)
WHERE 
    id = $1
RETURNING 
    id, 
    user_id, 
    subject_id, 
    num_question, 
    time_exam, 
    time_start_exam, 
    state, 
    questions
`

type UpdateContestParams struct {
	ID            int64        `json:"id"`
	NumQuestion   int32        `json:"num_question"`
	TimeExam      int32        `json:"time_exam"`
	TimeStartExam int64        `json:"time_start_exam"`
	State         ContestState `json:"state"`
	Questions     string       `json:"questions"`
}

type UpdateContestRow struct {
	ID            int64        `json:"id"`
	UserID        int64        `json:"user_id"`
	SubjectID     int64        `json:"subject_id"`
	NumQuestion   int32        `json:"num_question"`
	TimeExam      int32        `json:"time_exam"`
	TimeStartExam int64        `json:"time_start_exam"`
	State         ContestState `json:"state"`
	Questions     string       `json:"questions"`
}

func (q *Queries) UpdateContest(ctx context.Context, arg UpdateContestParams) (UpdateContestRow, error) {
	row := q.db.QueryRow(ctx, updateContest,
		arg.ID,
		arg.NumQuestion,
		arg.TimeExam,
		arg.TimeStartExam,
		arg.State,
		arg.Questions,
	)
	var i UpdateContestRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubjectID,
		&i.NumQuestion,
		&i.TimeExam,
		&i.TimeStartExam,
		&i.State,
		&i.Questions,
	)
	return i, err
}
